// <auto-generated />
using System;
using BADProject.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BADProject.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BADProject.Domain.Entities.Anime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Release_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Animes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Humans retreat behind enormous walls from the monstrous Titans, but a young man vows revenge after a personal loss.",
                            GenreId = 1,
                            ImageURL = "/AttackOnTitan.jpg",
                            Release_date = new DateTime(2013, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Attack on Titan"
                        },
                        new
                        {
                            Id = 2,
                            Description = "An energetic ninja who is shunned by his village for housing a fearsome beast works hard to earn his village's respect.",
                            GenreId = 1,
                            ImageURL = "/Naruto.jpg",
                            Release_date = new DateTime(2002, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Naruto"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A young girl stumbles into a mystical world where she must work in a bathhouse for the gods to free herself and her transformed parents.",
                            GenreId = 5,
                            ImageURL = "/SpiritedAway.jpg",
                            Release_date = new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Spirited Away"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A brilliant teen finds a notebook with which he can kill anyone by writing their name, initiating a cat-and-mouse game with authorities.",
                            GenreId = 6,
                            ImageURL = "/DeathNote.jpg",
                            Release_date = new DateTime(2006, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Death Note"
                        },
                        new
                        {
                            Id = 5,
                            Description = "In a world where nearly everyone has superpowers, a powerless boy enrolls in an academy for heroes, aiming to become the greatest.",
                            GenreId = 1,
                            ImageURL = "/MyHeroAcademia.jpg",
                            Release_date = new DateTime(2016, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "My Hero Academia"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A young pirate and his crew embark on a quest to find the greatest treasure ever left by the legendary Pirate, Gold Roger.",
                            GenreId = 2,
                            ImageURL = "/OnePiece.jpg",
                            Release_date = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "One Piece"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A college student gains supernatural abilities after a ghoul organ transplant, finding himself torn between two worlds.",
                            GenreId = 6,
                            ImageURL = "/TokyoGhoul.jpg",
                            Release_date = new DateTime(2014, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tokyo Ghoul"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Two teenagers share a profound, magical connection upon discovering they are swapping bodies with each other.",
                            GenreId = 8,
                            ImageURL = "/YourName.jpg",
                            Release_date = new DateTime(2016, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Your Name"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Two brothers use alchemy to try to resurrect their mother, but instead they unleash a series of tragic events.",
                            GenreId = 1,
                            ImageURL = "/FullMetalAlchemist.jpg",
                            Release_date = new DateTime(2009, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Fullmetal Alchemist: Brotherhood"
                        },
                        new
                        {
                            Id = 10,
                            Description = "A ragtag crew of bounty hunters chase down the galaxy's most dangerous criminals; they'll save the world for the right price.",
                            GenreId = 9,
                            ImageURL = "/CowboyBebop.jpg",
                            Release_date = new DateTime(1998, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Cowboy Bebop"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Teens pilot giant mechs to protect Earth from mysterious beings, but the pilots' own traumas might pose a greater danger.",
                            GenreId = 9,
                            ImageURL = "/NeonGenesisEvangelion.jpg",
                            Release_date = new DateTime(1995, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Neon Genesis Evangelion"
                        },
                        new
                        {
                            Id = 12,
                            Description = "A group of friends discovers a way to send messages to the past, but their tampering with time leads to unforeseen, dark consequences.",
                            GenreId = 9,
                            ImageURL = "/SteinsGate.jpg",
                            Release_date = new DateTime(2011, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Steins;Gate"
                        },
                        new
                        {
                            Id = 13,
                            Description = "A young boy follows in his missing father’s footsteps to become a Hunter, facing perilous tasks and dangerous creatures along the way.",
                            GenreId = 2,
                            ImageURL = "/HunterXHunter.jpg",
                            Release_date = new DateTime(2011, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Hunter x Hunter"
                        },
                        new
                        {
                            Id = 14,
                            Description = "An unlikely trio of adventurers in a hip-hop infused version of Edo-era Japan search for a samurai who smells of sunflowers.",
                            GenreId = 12,
                            ImageURL = "/SamuraiChamploo.jpg",
                            Release_date = new DateTime(2004, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Samurai Champloo"
                        },
                        new
                        {
                            Id = 15,
                            Description = "In a future Japan, the Sibyl System assesses everyone’s threat level, but what happens when the system itself is flawed?",
                            GenreId = 10,
                            ImageURL = "/PsychoPass.jpg",
                            Release_date = new DateTime(2012, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Psycho-Pass"
                        },
                        new
                        {
                            Id = 16,
                            Description = "A passionate high school student with dreams of volleyball glory faces challenges and builds friendships on his journey to the top.",
                            GenreId = 14,
                            ImageURL = "/Haikyuu.jpg",
                            Release_date = new DateTime(2014, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Haikyuu!!"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Continuing from Clannad, the story follows the challenges and heartwarming moments of life after high school.",
                            GenreId = 4,
                            ImageURL = "/Clanned.jpg",
                            Release_date = new DateTime(2008, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Clannad: After Story"
                        },
                        new
                        {
                            Id = 18,
                            Description = "A girl and her mysterious robot friend descend into the Abyss, a terrifyingly deep chasm, to uncover the truth about her mother.",
                            GenreId = 5,
                            ImageURL = "/MadeInAbyss.jpg",
                            Release_date = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Made in Abyss"
                        },
                        new
                        {
                            Id = 19,
                            Description = "In an Edo-era Japan conquered by aliens, the samurai Gintoki navigates the oddities of life with humor and heart.",
                            GenreId = 3,
                            ImageURL = "/Gintama.jpg",
                            Release_date = new DateTime(2006, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Gintama"
                        },
                        new
                        {
                            Id = 20,
                            Description = "A kind-hearted boy becomes a demon slayer to avenge his family slaughtered by demons and to cure his demon-turned sister.",
                            GenreId = 1,
                            ImageURL = "/DemonSlayer.jpg",
                            Release_date = new DateTime(2009, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Demon Slayer"
                        });
                });

            modelBuilder.Entity("BADProject.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Animation"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Family"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Historical"
                        });
                });

            modelBuilder.Entity("BADProject.Domain.Entities.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BADProject.Domain.Entities.WatchList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("Watchlists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "CanManageCatalog",
                            ClaimValue = "true",
                            UserId = "84b2fd03-216d-4ade-add6-ad358d253337"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SportStore.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "84b2fd03-216d-4ade-add6-ad358d253337",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a93150f3-acec-445d-b86a-a26543215a52",
                            DateOfBirth = new DateTime(1992, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@admin.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@ADMIN.COM",
                            NormalizedUserName = "USER@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMkYpE8a3BCdbCaVx26PL9pySz4IWD559NHIzxVcdMVJi4PwCddNcPmRQFgi294cKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2ccec64-d7d8-49d9-bef4-6ab4bc123995",
                            TwoFactorEnabled = false,
                            UserName = "user@admin.com"
                        },
                        new
                        {
                            Id = "f1ff6ef6-ee4e-4b5b-a9ba-81e6575673ce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2f302b7-c628-4ef1-8540-8b5b0d9dadfc",
                            DateOfBirth = new DateTime(1990, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Wick",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP9YlpBYUfQjHGNhCxDF+2C7EXdRsSyzPibAEZml+PS4Dkkt7XMrpKHYfz9RWy31Og==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14f20fa9-81fc-49b4-a0c9-bdc92f65a0cf",
                            TwoFactorEnabled = false,
                            UserName = "user@gmail.com"
                        });
                });

            modelBuilder.Entity("BADProject.Domain.Entities.Anime", b =>
                {
                    b.HasOne("BADProject.Domain.Entities.Genre", "Genre")
                        .WithMany("Animes")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BADProject.Domain.Entities.Reviews", b =>
                {
                    b.HasOne("BADProject.Domain.Entities.Anime", "Anime")
                        .WithMany("Reviews")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportStore.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("BADProject.Domain.Entities.WatchList", b =>
                {
                    b.HasOne("BADProject.Domain.Entities.Anime", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SportStore.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SportStore.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportStore.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SportStore.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BADProject.Domain.Entities.Anime", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BADProject.Domain.Entities.Genre", b =>
                {
                    b.Navigation("Animes");
                });
#pragma warning restore 612, 618
        }
    }
}
